attrs==24.2.0
beautifulsoup4==4.12.3
certifi==2024.8.30
cffi==1.17.1
charset-normalizer==3.4.0
dnspython==2.7.0
h11==0.14.0
idna==3.10
outcome==1.3.0.post0
packaging==24.1
pycparser==2.22
pymongo==4.10.1
PySocks==1.7.1
python-dotenv==1.0.1
requests==2.32.3
selenium==4.26.1
sniffio==1.3.1
sortedcontainers==2.4.0
soupsieve==2.6
trio==0.27.0
trio-websocket==0.11.1
typing_extensions==4.12.2
urllib3==2.2.3
webdriver-manager==4.0.2
websocket-client==1.8.0
wsproto==1.2.0







# import json
# import re
# import requests
# from bs4 import BeautifulSoup



# def get_video_info(video_url):
# # """Fetches video page HTML and parses video information."""
#     response = requests.get(video_url)
#     # print(response.text())
#     response.raise_for_status() # Ensure the request was successful



# # Locate the "ytInitialPlayerResponse" object in the HTML
#     match = re.search(r'ytInitialPlayerResponse\s*=\s*({.*?});', response.text)
#     if not match:
#         print("Error: Could not retrieve video information.")
#         return None


#     # Parse JSON from the matched string
#     player_response = json.loads(match.group(1))
#     streaming_data = player_response.get("streamingData", {})



#     # Find the video format with both audio and video (if available)
#     formats = streaming_data.get("formats", [])
#     if not formats:
#         print("Error: No available formats for this video.")
#         return None



#     # Get the first available format with both video and audio
#     stream_url = formats[0].get("url")
#     if not stream_url:
#         print("Error: Could not retrieve the stream URL.")
#         return None


#     # print(stream_url)
#     return stream_url

# def download_video(stream_url, output_path='video.mp4'):
#     # """Downloads the video file from the stream URL."""
#     headers = {
#     "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36"
#     }
#     response = requests.get(stream_url, headers=headers, stream=True)
#     print(response.text)
#     response.raise_for_status()



#     with open(output_path, 'wb') as file:
#         for chunk in response.iter_content(chunk_size=1024):
#             file.write(chunk)
#             print(f"Downloaded video to {output_path}")


# if __name__ == "__main__":
#     video_url = "https://www.youtube.com/watch?v=FUKmyRLOlAA"
#     stream_url = get_video_info(video_url)
#     print(stream_url)
#     if stream_url:
#         download_video(stream_url)